// Code generated by nullable_struct. DO NOT EDIT.

package test

import (
	"bytes"
	"encoding/json"
	)

// NullableValue is a nullable value. It supports JSON serialization.
type NullableData struct {
	value *Data
	valid bool
}

var (
	NullData = NullableData{valid: false}
	emptyDataBytes   = []byte(``)
	emptyDataJSON    = []byte(`""`)
	nullDataBytes    = []byte("null")
)

// DataFrom creates a new NullableData
func NullableDataFrom(value Data) NullableData {
	return newNullableData(&value, true)
}

// DataFromPtr creates a new NullableData that be null if value is nil.
func NullableDataFromPtr(value *Data) NullableData {
	if value == nil {
		return NullData
	}
	return newNullableData(value, true)
}

// newNullableData creates a new NullableData
func newNullableData(valuePtr *Data, valid bool) NullableData {
	return NullableData{
		value: valuePtr,
		valid: valid,
	}
}

// Valid returns true if NullableData is not null.
func (v NullableData) Valid() bool {
	return v.valid
}

// Ptr returns a pointer to this NullableData's value, or a nil pointer if this NullableData is null.
func (v NullableData) Ptr() *Data {
	if !v.valid {
		return nil
	}
	return v.value
}

// UnmarshalJSON implements json.Unmarshaler.
func (v *NullableData) UnmarshalJSON(data []byte) error {
	var value Data
	if bytes.Equal(data, emptyDataBytes) || bytes.Equal(data, nullDataBytes) || bytes.Equal(data, emptyDataJSON) {
		v.value = nil
		v.valid = false
		return nil
	}
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	v.value = &value
	v.valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (v NullableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}
